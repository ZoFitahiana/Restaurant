openapi: 3.0.0
info:
  title: Restaurant Management API
  version: 1.0.0
  description: API for managing restaurant ingredients, dishes, and orders.

paths:
  /ingredients:
    get:
      summary: Retrieve a list of ingredients
      description: Returns a list of ingredients with their current price, price history, stock movement history, and current available quantity.
      parameters:
        - name: priceMinFilter
          in: query
          description: Minimum price filter for ingredients
          required: false
          schema:
            type: number
            format: double
        - name: priceMaxFilter
          in: query
          description: Maximum price filter for ingredients
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: A list of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          description: Bad request, invalid parameters
        '404':
          description: Not found, no ingredients match the criteria
        '500':
          description: Internal server error

  /ingredients/{ingredientId}/prices:
    put:
      summary: Add a list of new prices to an ingredient's price history
      description: Adds a list of new prices to the price history of a specified ingredient.
      parameters:
        - name: ingredientId
          in: path
          required: true
          description: ID of the ingredient to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceRequest'
      responses:
        '200':
          description: Successfully updated ingredient with new prices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          description: Bad request, invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error

  /ingredients/{ingredientId}/stockMovements:
    put:
      summary: Add a list of new stock movements to an ingredient's stock movement history
      description: Adds a list of new stock movements to the stock movement history of a specified ingredient.
      parameters:
        - name: ingredientId
          in: path
          required: true
          description: ID of the ingredient to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockMovementRequest'
      responses:
        '200':
          description: Successfully updated ingredient with new stock movements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          description: Bad request, invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error

  /dishes:
    get:
      summary: Retrieve a list of dishes
      description: Returns a list of dishes with their ingredients, required quantities, current price, and available quantity.
      responses:
        '200':
          description: A list of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DishRest'
        '500':
          description: Internal server error

  /dishes/{dishId}/ingredients:
    put:
      summary: Add a list of ingredients to a dish
      description: Adds a list of ingredients with their respective quantities to a specified dish.
      parameters:
        - name: dishId
          in: path
          required: true
          description: ID of the dish to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DishIngredientRequest'
      responses:
        '200':
          description: Successfully updated dish with new ingredients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishRest'
        '400':
          description: Bad request, invalid input
        '404':
          description: Dish not found
        '500':
          description: Internal server error

  /orders/{reference}:
    get:
      summary: Retrieve an order by reference
      description: Returns an order with the given reference, including its dishes, their current prices, quantities, and statuses.
      parameters:
        - name: reference
          in: path
          required: true
          description: Reference of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /orders/{reference}/dishes:
    put:
      summary: Update the list of dishes in an order
      description: Updates the list of dishes and their quantities in an order. Also updates the order status.
      parameters:
        - name: reference
          in: path
          required: true
          description: Reference of the order to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dishes:
                  type: array
                  items:
                    $ref: '#/components/schemas/DishOrderRequest'
                status:
                  type: string
                  enum: [CREATED, CONFIRMED]
      responses:
        '200':
          description: Successfully updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request, invalid input
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /orders/{reference}/dishes/{dishId}:
    put:
      summary: Update the status of a dish in an order
      description: Updates the status of a dish within an order.
      parameters:
        - name: reference
          in: path
          required: true
          description: Reference of the order
          schema:
            type: string
        - name: dishId
          in: path
          required: true
          description: ID of the dish to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [IN_PROGRESS, FINISHED, DELIVERED]
      responses:
        '200':
          description: Successfully updated dish status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishOrder'
        '400':
          description: Bad request, invalid input
        '404':
          description: Dish or Order not found
        '500':
          description: Internal server error

components:
  schemas:
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Tomate"
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
        stockMovements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovement'

    Price:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        amount:
          type: number
          format: double
          example: 2.5
        dateValue:
          type: string
          format: date
          example: "2024-08-01"

    StockMovement:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: number
          format: double
          example: 1000.0
        unit:
          type: string
          example: "G"
        movementType:
          type: string
          enum: [IN, OUT]
          example: "IN"
        creationDatetime:
          type: string
          format: date-time
          example: "2024-08-01T06:00:00Z"

    PriceRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        amount:
          type: number
          format: double
          example: 2.5
        dateValue:
          type: string
          format: date-time
          example: "2024-08-01T12:30:00Z"

    StockMovementRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: number
          format: double
          example: 100.0
        unit:
          type: string
          example: "G"
        movementType:
          type: string
          enum: [IN, OUT]
          example: "IN"
        creationDatetime:
          type: string
          format: date-time
          example: "2024-08-01T10:00:00Z"

    DishRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Spaghetti Bolognese"
        availableQuantity:
          type: integer
          example: 10
        actualPrice:
          type: number
          format: double
          example: 12.99
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/DishIngredientRest'

    DishIngredientRest:
      type: object
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasicProperty'
        requiredQuantity:
          type: number
          format: double
          example: 200.0
        unit:
          type: string
          example: "G"

    IngredientBasicProperty:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Tomate"
        currentPrice:
          type: number
          format: double
          example: 2.5
        availableQuantity:
          type: number
          format: double
          example: 1000.0

    DishIngredientRequest:
      type: object
      properties:
        ingredientId:
          type: integer
          format: int64
          example: 1
        requiredQuantity:
          type: number
          format: double
          example: 200.0
        unit:
          type: string
          example: "G"

    Order:
      type: object
      properties:
        reference:
          type: string
          example: "ORD12345"
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/DishOrder'
        status:
          type: string
          enum: [CREATED, CONFIRMED]
        totalPrice:
          type: number
          format: double
          example: 50.0

    DishOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        dish:
          $ref: '#/components/schemas/DishRest'
        quantity:
          type: integer
          example: 2
        status:
          type: string
          enum: [IN_PROGRESS, FINISHED, DELIVERED]

    DishOrderRequest:
      type: object
      properties:
        dishId:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          example: 2
